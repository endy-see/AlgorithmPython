"""
题目描述
大家都知道斐波那契数列，现在要求输入一个整数n，
请你输出斐波那契数列的第n项（从0开始，第0项为0）。其中n<=39
斐波那契数列：
n<=0, f(n)=0
n=1, f(n)=1
n > 1, f(n) = f(n-1) + f(n-2)

思路：
两种方法，一种是递归，一种是循环
斐波那契数量的变形：
1.青蛙跳台阶问题
  一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个n级台阶总共有多少种跳法
  思路：当n>2时，到达最后一级台阶的方法有2种：
       一种是由n-1级台阶走一步，一种是由n-2级台阶走两步 所以f(n)=f(n-1)+f(n-2)
2.用2*1的小矩形横纵或竖着去覆盖更大的矩形。
  请问用8个2*1的小矩形无重叠地覆盖一个2*8的大矩形，总共有多少种方法？
  思路：我们先把2*8的覆盖方法记为f(8)。用第一个2*1的小矩形去覆盖大矩形的最左边时有两种选择：
  竖着放或者横着放。当竖着放的时候，右边还剩下2*7的区域，这种情况下的覆盖方法记为f(7)。
  接下来考虑横着放的情况。当2*1的小矩形横着放在左上角的时候，左下角必须再横着放一个2*1的小矩形，
  而在右边还剩2*6的区域，这种情形下的覆盖方法记为f(6)，因此f(8)=f(7)+f(6)。
  此时我们可以看出，这仍是斐波那契数列
"""


# -*- coding:utf-8 -*-
class Solution:
    # 方法一：递归实现（无法通过oj）
    def Fibonacci1(self, n):
        # write code here
        if n <= 0:
            return 0
        if n == 1:
            return 1
        return self.Fibonacci1(n-1) + self.Fibonacci1(n-2)

    # 方法二：循环实现（从底向上实现）
    def Fibonacci(self, n):
        if n <= 0:
            return 0
        if n == 1:
            return 1

        i = 2
        fn_1 = 0
        fn_2 = 1
        while i <= n:
            res = fn_1 + fn_2
            fn_1 = fn_2
            fn_2 = res
            i += 1
        return res